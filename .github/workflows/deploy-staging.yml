name: Deploy to Staging

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # Only deploy on push to dev, not on PRs
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Staging via Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /root/stathis || { echo "Project directory not found"; exit 1; }
            
            # Single git pull for entire monorepo
            echo "📥 Pulling latest dev code..."
            git fetch origin
            git reset --hard origin/dev
            
            # Build staging containers from monorepo subfolders
            echo "🔨 Building staging containers..."
            
            # Build staging containers from same source (staging folders are empty)
            # Use same code but different tags for staging
            docker build -t stathis-frontend-staging:latest ./frontend/frontend
            docker build -t stathis-backend-staging:latest ./backend/backend
            
            # Deploy staging with compose
            docker compose -f docker-compose.staging.yml up -d --force-recreate
            
            # Wait for services
            echo "⏳ Waiting for staging services to start..."
            sleep 30
            
            # Health checks
            echo "🔍 Checking staging service health..."
            
            # Check staging frontend
            if docker exec stathis-frontend-staging curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅ Staging frontend is healthy"
            else
              echo "⚠️  Staging frontend health check failed"
              docker logs stathis-frontend-staging --tail 10
            fi
            
            # Check staging backend
            if docker exec stathis-backend-staging curl -f http://localhost:8080 >/dev/null 2>&1; then
              echo "✅ Staging backend is healthy"
            else
              echo "⚠️  Staging backend health check failed"
              docker logs stathis-backend-staging --tail 10
            fi
            
            # Show resource usage
            echo ""
            echo "📊 Server Resources:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
            echo ""
            echo "💾 Disk Usage:"
            df -h /
            
            # Clean up old images
            docker image prune -f
            
            echo ""
            echo "🧪 Staging deployment complete!"
            echo "Web: https://staging-stathis.ryne.dev"
            echo "API: https://staging-api-stathis.ryne.dev"