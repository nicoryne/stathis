name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-check:
    name: Deploy Check (PR to main)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
    concurrency:
      group: deploy-check-${{ github.head_ref || github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Confirm deploy workflow will run on merge
        run: |
          echo "This is a dry-run check. On merge to main, the deploy job will execute."
      - name: Validate server SSH secrets are present
        env:
          H: ${{ secrets.DO_HOST }}
          U: ${{ secrets.DO_USERNAME }}
          K: ${{ secrets.DO_SSH_KEY }}
        run: |
          [ -z "$H" ] && echo "Missing secret: DO_HOST" && exit 1 || true
          [ -z "$U" ] && echo "Missing secret: DO_USERNAME" && exit 1 || true
          [ -z "$K" ] && echo "Missing secret: DO_SSH_KEY" && exit 1 || true
      - name: Summarize changed areas
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'web/**'
            backend:
              - 'backend/**'
      - name: Output change summary
        run: |
          echo "web changes: ${{ steps.changes.outputs.web }}"
          echo "backend changes: ${{ steps.changes.outputs.backend }}"
  
  deploy:
    name: Build and Deploy to VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    concurrency:
      group: deploy-production
      cancel-in-progress: true
    env:
      SSH_HOST: ${{ secrets.DO_HOST }}
      SSH_USER: ${{ secrets.DO_USERNAME }}
      SSH_KEY: ${{ secrets.DO_SSH_KEY }}
      REMOTE_BASE: /root/stathis
      REMOTE_BACKEND_DIR: /root/stathis/backend/backend
      REMOTE_FRONTEND_DIR: /root/stathis/frontend/frontend
    steps:
      - uses: actions/checkout@v4

      # Build backend Spring Boot jar (skip tests for speed)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build backend jar
        working-directory: backend/stathis
        run: |
          chmod +x mvnw || true
          ./mvnw -q -B -DskipTests package
          ls -la target
          JAR_PATH=$(ls target/*.jar | head -n1)
          echo "JAR_PATH=$(pwd)/$JAR_PATH" >> $GITHUB_ENV
      - name: Rename jar to server.jar
        run: |
          cp "$JAR_PATH" server.jar

      # Sync frontend source (Next.js) to VPS; compose will build at runtime
      - name: Compress frontend for transfer
        run: |
          tar -czf frontend.tgz -C web/stathis-web .

      # Copy artifacts to server
      - name: Upload backend server.jar
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          source: "server.jar"
          target: "${{ env.REMOTE_BACKEND_DIR }}"
          strip_components: 0
      - name: Upload frontend bundle
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          source: "frontend.tgz"
          target: "${{ env.REMOTE_FRONTEND_DIR }}/.."
          strip_components: 0

      # Deploy and restart services via docker compose
      - name: Restart services on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -euo pipefail
            cd "${{ env.REMOTE_BASE }}"
            # Place frontend files
            mkdir -p "${{ env.REMOTE_FRONTEND_DIR }}"
            tar -xzf "${{ env.REMOTE_FRONTEND_DIR }}/../frontend.tgz" -C "${{ env.REMOTE_FRONTEND_DIR }}"
            rm -f "${{ env.REMOTE_FRONTEND_DIR }}/../frontend.tgz"
            # Ensure backend jar is in place
            test -f "${{ env.REMOTE_BACKEND_DIR }}/server.jar" || { echo "server.jar is missing"; exit 1; }
            # Restart only the services we updated
            docker compose pull || true
            docker compose up -d --force-recreate --no-deps stathis-backend stathis-frontend
            # Basic health checks
            echo "Waiting for containers to settle..."; sleep 20
            curl -f http://localhost:3000 || { echo "Frontend failed"; docker compose logs --no-color --tail 100 stathis-frontend; exit 1; }
            curl -f http://localhost:8080/actuator/health || { echo "Backend failed"; docker compose logs --no-color --tail 100 stathis-backend; exit 1; }
            docker system prune -f || true
            echo "Deployment complete."
