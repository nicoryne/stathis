package citu.edu.stathis.mobile.features.vitals.data.repository

import citu.edu.stathis.mobile.core.data.models.ClientResponse
import citu.edu.stathis.mobile.features.vitals.data.model.VitalSigns
import citu.edu.stathis.mobile.features.vitals.domain.VitalsApiService
import citu.edu.stathis.mobile.features.vitals.data.model.VitalsRequestDto
import citu.edu.stathis.mobile.features.vitals.data.model.VitalsResponseDto
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import javax.inject.Inject

class VitalsRepositoryImpl @Inject constructor(
    private val vitalsApiService: VitalsApiService
) : VitalsRepository {

    override suspend fun saveVitals(vitalSigns: VitalSigns): ClientResponse<Unit> {
        return try {
            val requestDto = VitalsRequestDto(
                // Assuming your backend DTO matches these fields from VitalSigns domain model
                // The backend DTO has studentId, classroomId, taskId etc.
                // These need to be present in the `vitalSigns` object passed to this function
                // or mapped from a User Profile / Session context.
                studentId = vitalSigns.userId, // Assuming userId from domain model maps to studentId
                heartRate = vitalSigns.heartRate,
                oxygenSaturation = vitalSigns.oxygenSaturation.toInt(), // Backend DTO has Integer
                timestamp = vitalSigns.timestamp.format(DateTimeFormatter.ISO_DATE_TIME),
                // Map other fields like systolicBP, diastolicBP, respirationRate, temperature
                // from vitalSigns domain model to VitalsRequestDto
                // Also map classroomId, taskId, isPreActivity, isPostActivity if available
                // For example:
                classroomId = vitalSigns.classroomId,
                taskId = vitalSigns.taskId,
                isPreActivity = vitalSigns.isPreActivity,
                isPostActivity = vitalSigns.isPostActivity
                // physicalId is generated by backend based on VitalSignsDTO.java
            )
            // Assuming your API service call is a suspend function returning a Response or similar
            vitalsApiService.saveVitals(requestDto) // Adjust based on actual API response
            ClientResponse(success = true, message = "Vitals saved successfully.", data = Unit)
        } catch (e: Exception) {
            // Log.e("VitalsRepositoryImpl", "Error saving vitals", e)
            ClientResponse(success = false, message = e.message ?: "Failed to save vitals.", data = null)
        }
    }

    override fun getVitalsHistory(userId: String): Flow<ClientResponse<List<VitalSigns>>> = flow {
        try {
            val responseDtoList = vitalsApiService.getVitalsHistory(userId)
            val vitalSignsList = responseDtoList.map { it.toDomain() }
            emit(ClientResponse(success = true, message = "History fetched", data = vitalSignsList))
        } catch (e: Exception) {
            // Log.e("VitalsRepositoryImpl", "Error fetching history", e)
            emit(ClientResponse(success = false, message = e.message ?: "Failed to fetch history.", data = null))
        }
    }

    override suspend fun deleteVitalRecord(recordId: String): ClientResponse<Unit> {
        return try {
            vitalsApiService.deleteVitalRecord(recordId) // Adjust based on actual API response
            ClientResponse(success = true, message = "Record deleted.", data = Unit)
        } catch (e: Exception) {
            // Log.e("VitalsRepositoryImpl", "Error deleting record", e)
            ClientResponse(success = false, message = e.message ?: "Failed to delete record.", data = null)
        }
    }
}

// Mapper function example (if VitalsResponseDto is used)
fun VitalsResponseDto.toDomain(): VitalSigns {
    return VitalSigns(
        id = this.physicalId, // Assuming backend DTO has these fields
        userId = this.studentId,
        systolicBP = this.bpSys ?: 0, // Provide defaults if nullable
        diastolicBP = this.bpDia ?: 0,
        heartRate = this.heartRate ?: 0,
        respirationRate = this.respirationRate ?: 0,
        temperature = this.temperature ?: 0f,
        oxygenSaturation = this.oxygenSaturation?.toFloat() ?: 0f,
        timestamp = LocalDateTime.parse(this.timestamp, DateTimeFormatter.ISO_DATE_TIME),
        deviceName = "Backend Record", // Or map if available
        classroomId = this.classroomId,
        taskId = this.taskId,
        isPreActivity = this.isPreActivity,
        isPostActivity = this.isPostActivity
    )
}